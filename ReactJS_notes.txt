React:
	is a JS library for building UI => created by Facebook.
	properties and state
	parent-child relationships
	component lifecycle
	does not require Node.js to work, but will use npm (node package manager)
	npm => makes the process of building fullstack
		applications with Reach much simpler.

	open source project
	to make single page applications
	another exciting feature is virtual DOM
	functional programming
	immutability
	commonly used in enterprise applications
	
Why React is so fast?
	JS objects are faster than DOM objects.
	React Virtual DOM is a JS object
	Never reads from the real DOM
	
React Syntax:
	add react library from facebook git-hub page
	copy the script code and paste it in html
	then in body:
		have a script tag which will have all of the react content.
		will contain a a function called ReactDOM.render
	ReactDOM.render():
			takes 2 arguments:
			first what we want to create
			second where we want to put it.
			

	Ex:
		ReactDOM.render(
			React.createElement('div',null,'Hello World'),
			document.getElementById('react-container'))
		react-container => is an id with div 

JSX: stands for Javascript for XML
	instead of creating all these createElement function class,
	we will use tags over here.
	Ex : => unordered list
	Babble => will take the JSX and turn into createElement call, so the browser can read it easily.
		is a transpiler that will transpiler JS code.
		works for JSX
		works for ES6 and beyond
		install babel from the babbel site and put it in the HTML => CDN, put it in another script tag
		
	everytime we add babel=> we need to add <script type='text/babel'></script>

React Components:
	components are small user interface elements that display data as it changes over time.
	then these components are composed together, nested inside of one another to create entire unser interfaces.
	
Creating a components:
	components should be in the <script> tags:
	whenever create a component, set it to a variable
	var MyComponent = React.createClass( => this function takes an object{
		render() { => first method is required, tell what we need to return
			return <div>
			<h1>....</h1>				
			<p>....</p>
			</div>
			}
	
		})
	

		now we need to use this function:
		before the <script> tag finishes:
				ReactDOM.render(<MyComponent />, where you want to put it) => takes 2 arguments:

React components with ES6:
		before the declaration of the variable:
			class MyComponent extends React.Component{
				render(){
				use the same code as before.
			}
		}

3 ways to create components:
		with ES6
		with create class
		with a stateless function => a stateless functional component is just a simple function that returns react elements.
React Components as:
	after the <script> tag:
		assign a function to a variable
		const MyComponent = () => {
		return statments from the previous code
		}

Using properties:
	sending properties to components is similar to adding attributes to HTML
	<h1>{this.props.text}</h1>
	

	ReactDOM.render(<MyComponent text='HelloWorld' />,...))
	{} => JSX expression
	{this.props.text}
	{this.props.children}

Handling Events:
	first create a component:
		var Note= React.createClass({
			render() {
			return => the best practice is to wrap all the DOM elements that we want to create in parenthesis
			  return (
				<div  className='Note'> => in JSX to create a class use className='' not class=''
					
				</div>			
		)	
		}
		})

Using States:
	when a component's state data changes
	after <script> tag:
		var checkbox = React.createClass({
		getInitialState() { => get the initial state
			return{checked:false},

		another function...
		this.setState() =>set the state to different, takes an object
		}
		render(){
			return (<div>
				...code
	
		</div>
		)	
		}	
		})

Using refs:
	<textarea  ref ='newText'></textarea>

PropTypes:
	are an optional feature
	serves as documentation about how you wish your components to work and what values you expect for them.
	will be set equal to an object

	propTypes: {
		count : function(props, propName){
		code....
	}	
	},

	this.state.notes.map((note, i) => {
		return <Note key={i} > {Note}></Note>
		}

Component LifeCycle:
	Hooks for creation, lifetime, and teardown of components
	allows to add libraries, load data, etc at specific times.
	
	Mounting:
		getInitialState, componentWillMount, render, componentDidMount
		
	Updating:
		componentWillReceiveProps, shouldComponentUpdate, componentWillUpdate, render, componentDidUpdate
	
Create React App:
		is a command line tool that can be used to build React Applications
		is a utility that's going to install everything
			you need to work with React, without having to spend hours setting up development environment.
		need to use NPM in order to run Create React App
		
	to verify NPM => npm -v
	then sudo npm install -g create-react-app
	decide where to install the project (location)
	then just type:
		create-react-app name_of_project 
	cd name_of_project
		then npm start

	App.js is the main file of the project => localhost
	

	then paste the code...

	app.js filename same as export ... in the file
	
	npm start to run the server
