Bootstrap Grid System:
	.12-column grid
	.Accessed through CSS classes
	.Three key concepts
		.Containers
		.Rows
		.Columns

Containers:
	.control layout => declare through a special class that allows you to control the layout
	.Add padding => going to create 15 px of padding on each side of the element.
	.Two types
		.fixed
		.fluid
	
	fluid container:
		always the width of the browser
	
	Fixed-width Container:
		.15px padding on each side
		.Adjusts to media query breakpoints
		
		ExtraSmall(<768px)  Small(>=768px)  Medium(>-992px)  Large(>=1200px)
	Width   Auto    750px   	970px	1170px

Rows:
	.Horizantal groups of columns
	.place within container
	.should always include columns
	.gets rid of container padding
	<div class="row"></div>
	.prepare containers so they can hold columns

Columns:
	when create your own column, it creates a gutter
	.30px gutters => by default => 15 px on each side
	.Use col-SIZE-SPAN
		size: When it stacks
		SPAN: how many columns
	.>12 columns wrap	

	Column Metrics:
			extraSmall(<768px), Small(>=768px),Medium(>=992px),Large(>=1200px)
	Container	Auto,750px,970px,1170px
	Size		.col-xs-, .col-sm-,.col-md-,.col-lg-
	Column width	auto, ~62px, ~81px, ~97px
	<div class="col-md-6"></div>

clearfix class: generally used in CSS to clear problem with floats, which is what are doing with different columns.
	<div class="clearfix visible-sm-block" ></div>	

offsetting: ask certain column to move over by a certain numbers of column widths
	class="col-xs-offset-3 col-xs-6

Also push and pull:
	col-xs-push-1, col-sm-pull-8			

Tags:
	<mark></mark>
	<s></s> => striking
	<del></del> => delete
	<ins></ins> => inserted
	<b></b>
	
Classes:
	class = "text-left"
	class = "text-right"
	class = "text-center"
	class = "text-justify"
	class = "text-nowrap"

Tansformation classes:
	class = "text-lowercase"
	class = "text-uppercase"
	class = "text-capitalize"
	<abbr title = "Captain"> Capt.</abbr>

Blockquotes:
	<blockquote></blockquote>
	<footer></footer>
	<blockquote class = "blockquote-reverse" ></blockquote>

3 types of lists:
	ul
	<ul class = "list-inline"></ul>
	ol
	<ol class="list-unstyled"></ol>
	<dl><dt></dt><dd></dd></dl>
	<dl class="dl-horizantal"></dl>
 
Styling Code:
	<code></code> => For HTML => <code>$lt;em&gt;</code>
	<kbd></kbd>
	<var>e</var>

	<pre></pre> => preformatted text
	<samp></samp>
	
	for long script => <pre class="pre-scrollable"></pre>

Buttons:
	3 different type that can be make to look like a button
	<a></a>, <button></button><input >

	class = "btn btn-default"

	Contextual classes Buttons:
		class="btn btn-default, class="btn btn-primary", class = "btn btn-success", class="btn btn-info", class="btn btn-warning", class="btn btn-danger"

	Button sizes:
		class="btn btn-default btn-lg"...
				btn-block

	Active button:
		class='btn btn-default active'

	Disabled button:
		class = 'btm btn-default disabled='disabled'

Tables:
	class='table'
	class ='table table-striped'
	class = 'table table-bordered'
	class = 'table table-hover'
	class = 'table table-condensed'
	<div class= 'table-responsive'></div>

Image Classes:
	right before alt tag, put class='img-responsive center-block'
	for rounded images => class = "img-rounded" 
	'img-circle', 'img-thumbnail'

Helper Classes:
	class = "text-muted"
	class = 'text-primary'
	class = 'text-success'
	class = 'text-info'
	class = 'text-warning'
	class = 'text-danger'
	class = 'bg-primary'
	class = 'bg-success'
	class = 'bg-info'
	class = 'bg-warning'
	class = 'bg-danger'
	class = 'center-block' => for image
	class = 'clearfix' => to get rid of float
	show and hidden element classes
	
Responsive Utilites:
	Visibiltiy at breakpoints/print
	VISIBILITY-SIZE-(DISPLAY)
		Visibility: visible/hidden
		Size: xs,sm,md,lg,print
		Display: block, inline,inline-block, print 

	class = 'visible-xs-block' or inline, inline-block
	
Forms:
	<input class = "form-control".... >
	class="form-group => have space between 2 rows
	class = "checkbox"
	class = 'radio'
      	class = 'radio-inline'
	class = 'checkbox-inline'
		

inline-Forms:
	<form class = "form-inline" >

Horizantal form: for mobile Users
	<form class = "form-horizantal">
	
Validation Style: with the form-group class
	has-warning
	has-error
	has-success
	then with the label => class = "control-label
	in form-group class => put has-feedback
	

Input-groups: allows you to combine fields together with other element
	class = "input-group"
	class = "input-group-addon"
	aria => Accessible Rich Internet Applications
	class = 'form-control'
	class = 'input-group-btn'

Dropdown:
	wrap both the button and div with a div taht has a class of dropdown.
		class = "dropdown"
		data-toggle = "dropdown" => allows you to enter your own data into any particular element.
		class = "dropdown-toggle"

		in <ul> put class ="dropdown-menu"
		<li> class="dropdown-header"
		<li> role="separator" divider between 2 different sections
		class = "disabled"
		class = "btn-group"
		class = "caret"

Button-groups: different kinds of button combinations
		role = "group"
		class  = "btn-group-vertical/horizantal"
		class = "btn-toolbar"
		role = "toolbar
		
Navigations:
	3 types: tabs, pills, navbars
	<ul> class = "nav nav-tabs"
	class = "pills"
 	class = "nav-stacked/ nav-justified"
	<nav> class = "navbar navbar-default/inverse"
	
Adding content to he navbar:
	bootstrap let you make brand => <div class ="navbar-header"> <a href="" class='navbar-brand'>
	class = "navbar-text"
	always give role = '' to your elements
	class="dropdown-menu"

Collapsing Navigation:
	<div class = "collapse navbar-collapse id =''" > <ul><li>
	
Breadcrumbs and paginations styles:
	class = "breadcrumbs" => navigate quickly to any point in the hierachy
	<nav><ul class = "pagers" => allow people to navigate through content
	 	<li class = "previous">

Create a Jumbotron and page header:
	class = "page-header"
	class = 'jumbotron'

Labels and Badgets:
	<span class = "label label-default">
	<span class = "badget">

Thumbnail Style: use it to create a nice looking grid of images taht works together with bootstrap grid.
	<a href='#' class = 'thumbnail'><img...

Adding media Styles:
	<div class = 'media'> <div class = 'media-left'> ..
	class="media-body"
	<img class = 'media-object' >
	<h3 class = 'media-heading'>
	<class = "media-middle'>
	
Following video with responsive embeds:
		<div class = 'embed-responsive embed-responsive-4by3'		
		<video class = 'embed-responsive-item' src ='' autoplay controls muted >

Styling list groups:
		<ul class = 'list-group'
		<li class = 'list-group-item'
		<span class = 'badge'>

Working with Panels:
	Panels => another way to encapsulate content in bootstrap.
	<div class ='panel panel-default'>....content
	class = 'panel-body'
	class = 'panel-heading'
	class = 'panel-title'
	
Wells:
	sort of a super-simpler version of panels
	<div class = 'well well-sm'
			

JS Components:
	Carousel: lets you take a griup of images and show them in a presentation taht you can control with buttons.

	create a container with a class of carousel => class = 'carousel'
		has many parts:
			images goes in class = 'carousel-inner'
			then place each images in class ='item active'
		if you want carousel to start automatically => class = 'carousel data-ride="carousel'
		can also add to carousel class:
				slide
		adding a caption with a div => class='carousel-caption'
		add navigation => need to give teh carousel an id.
		class = "left carousel-control'

		indicators at the bottom of the an image:
				orderlist: <ol class ='carousel-indicators'><li data-target='#id' data-slide-to=''>
		make sure to resize the images before putting in the carousel
		
	Modals: are common design pattern that lets you to show
		some content when the user pushes a button. 
		first need a button
		data-toggle='modal' data-target = '#id'
	need a series of tags to create a modal
	<div class='modal' id ='#id' tabindex'-1' role='dialog' aria-labeledby='modalLabel'>

	for the modal itself:
			<div class='modal-dialog' role='document'>
			<div class='model-content'>
			<div class='modal-body'>

	clickable closing area
	<div class='modal-header'>
	class='close'
	data-dismiss='modal'
	ara-label='Close'

	Controlling tabs with JS:
		2 pieces: actual tabs => for this we need list.
		<ul class = 'nav nav-tabs role='tablist'>
		<li role ='presentation'><a role='tab' datta-toggle='tab'>
		class='active'
		class='tab-content'
		class = 'tab-pane'

	Crafting collapsible content and accordions:
			either need a button or link.
			data-toggle='collapse'
			
	Tool-tip: 
		in HTML:
			<a href='' data-toggle ='tooltip' 
				data-placement='top' title=''>
		inJS:
			$('[data-toggle="tooltip"]').tooltip();

	Popover: same as tooltip.
		
